//
// Created by theor on 2022-06-13.
//
#include <unity.h>
#include <iostream>

const uint8_t OSCMIXA[128] = {127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 126, 125, 123, 120, 118, 116, 114, 112, 110, 108, 106, 104, 102, 100, 98, 96, 94, 92, 90, 88, 86, 84, 82, 80, 78, 76, 74, 72, 70, 68, 66, 64, 62, 60, 58, 56, 54, 52, 50, 48, 46, 44, 42, 40, 38, 36, 34, 32, 30, 28, 26, 24, 22, 20, 18, 16, 14, 12, 10, 8, 6, 4, 2, 0};
const uint8_t OSCMIXB[128] = {0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 123, 125, 126, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127};

const float LINEAR[128] = {0, 0.008, 0.016, 0.024, 0.031, 0.039, 0.047, 0.055, 0.063, 0.071, 0.079, 0.087, 0.094, 0.102, 0.11, 0.118, 0.126, 0.134, 0.142, 0.15, 0.157, 0.165, 0.173, 0.181, 0.189, 0.197, 0.205, 0.213, 0.22, 0.228, 0.236, 0.244, 0.252, 0.26, 0.268, 0.276, 0.283, 0.291, 0.299, 0.307, 0.315, 0.323, 0.331, 0.339, 0.346, 0.354, 0.362, 0.37, 0.378, 0.386, 0.394, 0.402, 0.409, 0.417, 0.425, 0.433, 0.441, 0.449, 0.457, 0.465, 0.472, 0.48, 0.488, 0.496, 0.504, 0.512, 0.52, 0.528, 0.535, 0.543, 0.551, 0.559, 0.567, 0.575, 0.583, 0.591, 0.598, 0.606, 0.614, 0.622, 0.63, 0.638, 0.646, 0.654, 0.661, 0.669, 0.677, 0.685, 0.693, 0.701, 0.709, 0.717, 0.724, 0.732, 0.74, 0.748, 0.756, 0.764, 0.772, 0.78, 0.787, 0.795, 0.803, 0.811, 0.819, 0.827, 0.835, 0.843, 0.85, 0.858, 0.866, 0.874, 0.882, 0.89, 0.898, 0.906, 0.913, 0.921, 0.929, 0.937, 0.945, 0.953, 0.961, 0.969, 0.976, 0.984, 0.992, 1.00};
const float POWER[128] = {0.0f, 0.00009f, 0.0003f, 0.0006f, 0.001f, 0.0016f, 0.0022f, 0.003f, 0.004f, 0.005f, 0.0062f, 0.0075f, 0.0089f, 0.0105f, 0.0122f, 0.014f, 0.016f, 0.018f, 0.02f, 0.022f, 0.025f, 0.027f, 0.03f, 0.033f, 0.036f, 0.039f, 0.042f, 0.045f, 0.049f, 0.052f, 0.056f, 0.06f, 0.063f, 0.068f, 0.072f, 0.076f, 0.08f, 0.085f, 0.09f, 0.094f, 0.099f, 0.104f, 0.109f, 0.115f, 0.12f, 0.126f, 0.131f, 0.137f, 0.143f, 0.149f, 0.155f, 0.161f, 0.168f, 0.174f, 0.181f, 0.188f, 0.194f, 0.201f, 0.209f, 0.216f, 0.223f, 0.231f, 0.238f, 0.246f, 0.254f, 0.262f, 0.27f, 0.278f, 0.287f, 0.295f, 0.304f, 0.313f, 0.321f, 0.33f, 0.34f, 0.349f, 0.358f, 0.368f, 0.377f, 0.387f, 0.397f, 0.407f, 0.417f, 0.427f, 0.437f, 0.448f, 0.459f, 0.469f, 0.48f, 0.491f, 0.502f, 0.513f, 0.525f, 0.536f, 0.548f, 0.56f, 0.571f, 0.583f, 0.595f, 0.608f, 0.62f, 0.632f, 0.645f, 0.658f, 0.671f, 0.684f, 0.697f, 0.71f, 0.723f, 0.737f, 0.75f, 0.764f, 0.778f, 0.792f, 0.806f, 0.82f, 0.834f, 0.849f, 0.863f, 0.878f, 0.893f, 0.908f, 0.923f, 0.938f, 0.953f, 0.969f, 0.984f, 1.0f};
void setUp() {}
void tearDown() {}

void toMix(uint8_t midi)
{
    std::cout << LINEAR[OSCMIXA[midi]] << " " << LINEAR[OSCMIXB[midi]] << std::endl;
}

uint8_t fromMix(float mixA, float mixB)
{
    for (size_t i = 0; i < 128; i++)
    {
        if (LINEAR[OSCMIXA[i]] == mixA && LINEAR[OSCMIXB[i]] == mixB)
        {
            return i;
        }
    }
    return 0;
}

void test_oscmix()
{
    toMix(64);
    // 77 -> oscmixa 100 -> 0.787
    // TEST_ASSERT_EQUAL_FLOAT(0.787, LINEAR[OSCMIXA[77]]);
    uint8_t r = fromMix(0.787, 1);
    std::cout << (int)r << std::endl;
    TEST_ASSERT_EQUAL_INT8(77, r);

    for (size_t i = 0; i < 128; i++)
    {
        float linA = LINEAR[OSCMIXA[i]];
        float linB = LINEAR[OSCMIXB[i]];
        uint8_t r = fromMix(linA, linB);
        TEST_ASSERT_EQUAL_INT8(i, r);

        /* code */
    }
}

template<typename T, size_t  N>
size_t cycleIndexOfSorted(const T(&array)[N] , T value, bool next, bool loop = true) {
    for (size_t i = 0; i < N; ++i) {
        if(value == array[i]) {
            if(next){
                while(value == array[i] && i < N) i++;
                if(i >= N && !loop)
                    return N - 1;
                return (i) % N;
            }else {
                if(i == 0 && !loop)
                    return 0;
                return (i+N-1) % N;
            }
        }
        if(value < array[i]) { return next ? i : (i - 2); }
    }
    return 0;
}
const float LINEARCENTREZERO[128] = { -1, -0.98, -0.97, -0.95, -0.93, -0.92, -0.9, -0.88, -0.87, -0.85, -0.83, -0.82, -0.8, -0.78, -0.77, -0.75, -0.73, -0.72, -0.7, -0.68, -0.67, -0.65, -0.63, -0.62, -0.6, -0.58, -0.57, -0.55, -0.53, -0.52, -0.5, -0.48, -0.47, -0.45, -0.43, -0.42, -0.4, -0.38, -0.37, -0.35, -0.33, -0.32, -0.3, -0.28, -0.27, -0.25, -0.23, -0.22, -0.2, -0.18, -0.17, -0.15, -0.13, -0.12, -0.1, -0.08, -0.07, -0.05, -0.03, -0.02, -0.01, 0, 0, 0, 0, 0, 0, 0.01, 0.02, 0.03, 0.05, 0.07, 0.08, 0.1, 0.12, 0.13, 0.15, 0.17, 0.18, 0.2, 0.22, 0.23, 0.25, 0.27, 0.28, 0.3, 0.32, 0.33, 0.35, 0.37, 0.38, 0.4, 0.42, 0.43, 0.45, 0.47, 0.48, 0.5, 0.52, 0.53, 0.55, 0.57, 0.58, 0.6, 0.62, 0.63, 0.65, 0.67, 0.68, 0.7, 0.72, 0.73, 0.75, 0.77, 0.78, 0.8, 0.82, 0.83, 0.85, 0.87, 0.88, 0.9, 0.92, 0.93, 0.95, 0.97, 0.98, 1};
void test_noise(){
    auto i = cycleIndexOfSorted(LINEARCENTREZERO, -0.00f, false, false);
    std::cout << i << std::endl;
    i = cycleIndexOfSorted(LINEARCENTREZERO, LINEARCENTREZERO[i], false, false);
    std::cout << i << std::endl;
    i = cycleIndexOfSorted(LINEARCENTREZERO, LINEARCENTREZERO[i], false, false);
    std::cout << i << std::endl;
}

void gen_filterres() {
    for (int i = 0; i < 128; ++i) {
        std::cout << 14.29f * POWER[i] + 0.71f << ", ";


    }

    std::cout << std::endl;
}

int main()
{
    UNITY_BEGIN();
    RUN_TEST(test_oscmix);
    RUN_TEST(test_noise);
    RUN_TEST(gen_filterres);
    UNITY_END();
}